<?php

use Awuxtron\LaravelEthereum\Utils\ABI;

it('should throw when passing empty types or params', function () {
    expect(fn () => ABI::encodeParameters([], [1]))->toThrow(InvalidArgumentException::class);
    expect(fn () => ABI::encodeParameters(['bool'], []))->toThrow(InvalidArgumentException::class);
    expect(fn () => ABI::encodeParameters([], []))->toThrow(InvalidArgumentException::class);
});

it('should throw when number of type elements not same as params', function () {
    expect(fn () => ABI::encodeParameters(['bool', 'bool'], [true]))->toThrow(InvalidArgumentException::class);
    expect(fn () => ABI::encodeParameters(['bool'], [true, false]))->toThrow(InvalidArgumentException::class);
});

// From: https://github.com/ChainSafe/web3.js/blob/1.x/test/abi.encodeParameter.js
$tests = json_decode(file_get_contents(__DIR__ . '/data/encodeParameter.json'));

foreach ($tests as $i => $test) {
    it("should encode parameter $i with type: $test[0]", function () use ($test) {
        expect((string) ABI::encodeParameter($test[0], $test[1]))->toEqual($test[2]);
    });
}

foreach ($tests as $i => $test) {
    it("should decode parameter $i with type: $test[0]", function () use ($test) {
        expect(json_decode(json_encode(ABI::decodeParameters([$test[0]], $test[2]))))->toMatchArray([$test[1]]);
    });
}

$tests2 = [
    [
        ['uint256', 'string'],
        ['2345675643', 'Hello!%'],
        '000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000',
    ],
    [
        ['uint64[]', 'bytes32'],
        [['34', '434'], '324567dfff'],
        '0000000000000000000000000000000000000000000000000000000000000040324567dfff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000001b2',
    ],
    [
        ['address', 'address', 'address', 'address'],
        [
            '0x90f8bf6a479f320ead074411a4b0e7944ea8c9c1',
            '0x10f8bf6a479f320ead074411a4b0e7944ea8c9c1',
            '0xfff8bf6a479f320ead074411a4b0e7944ea8c9c1',
            '0xddd8bf6a479f320ead074411a4b0e7944ea8c9c1',
        ],
        '00000000000000000000000090f8bf6a479f320ead074411a4b0e7944ea8c9c100000000000000000000000010f8bf6a479f320ead074411a4b0e7944ea8c9c1000000000000000000000000fff8bf6a479f320ead074411a4b0e7944ea8c9c1000000000000000000000000ddd8bf6a479f320ead074411a4b0e7944ea8c9c1',
    ],
    [
        ['uint32', 'bool'],
        [69, true],
        '00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        ['bytes3[2]'],
        [['616263', '646566']],
        '61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000',
    ],
    [
        ['string', 'bool', 'uint256[]'],
        ['dave', true, [1, 2, 3]],
        '0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003',
    ],
    [
        ['uint', 'uint32[]', 'bytes10', 'string'],
        [0x123, [0x456, 0x789], '31323334353637383930', 'Hello, world!'],
        '00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000',
    ],
    [
        ['uint[][]', 'string[]'],
        [[[1, 2], [3]], ['one', 'two', 'three']],
        '000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000',
    ],
    [
        ['uint', 'string', 'bytes2', 'tuple(bytes2, bool)', 'string', 'bool[]', 'string[]', 'bool[2]'],
        [256, 'abc', '6162', ['6364', true], 'hello', [true, false], ['Hello 1', 'Hello 2'], [true, true]],
        '00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140616200000000000000000000000000000000000000000000000000000000000063640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000568656c6c6fc6c6f203100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000748656c6c6f203200000000000000000000000000000000000000000000000000',
    ],
];

foreach ($tests2 as $i => $test) {
    it("should encode parameters $i with types: " . json_encode($test[0]), function () use ($test) {
        expect((string) ABI::encodeParameters($test[0], $test[1]))->toEqual($test[2]);
    });
}

foreach ($tests2 as $i => $test) {
    it("should decode parameters $i with types: " . json_encode($test[0]), function () use ($test) {
        expect(json_decode(json_encode(ABI::decodeParameters($test[0], $test[2]))))->toMatchArray($test[1]);
    });
}
